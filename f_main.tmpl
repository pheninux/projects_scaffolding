{{define "main" }}
    package main

    import (
    "crypto/tls"
    "database/sql"
    "flag"
    "html/template"
    "log"
    "net/http"
    "os"
    "time"

    /*"alexedwards.net/snippetbox/pkg/models"
    "alexedwards.net/snippetbox/pkg/models/mysql"

    _ "github.com/go-sql-driver/mysql"
    "github.com/golangcollege/sessions"*/
    )

    type contextKey string

    var contextKeyUser = contextKey("user")

    type application struct {
    errorLog *log.Logger
    infoLog  *log.Logger
    session  *sessions.Session
    {{range .models}}
        {{.name}} interface {
        {{range .func}}
            func {{.name}}()
        {{end}}
        }
    {{end}}
    templateCache map[string]*template.Template
    }

    func main() {
    addr := flag.String("addr", ":4001", "HTTP network address")
    dsn := flag.String("dsn", "{{.dataBaseConnexion.login}}:{{.dataBaseConnexion.mdp}}@/{{.dataBaseConnexion.dataBaseName}}?parseTime=true", "MySQL data source name")
    secret := flag.String("secret", "{{.session.secret}}", "Secret key")
    flag.Parse()

    infoLog := log.New(os.Stdout, "{{.logFile.stdout}}", log.Ldate|log.Ltime)
    errorLog := log.New(os.Stderr, "{{.logFile.stderr}}", log.Ldate|log.Ltime|log.Lshortfile)

    db, err := openDB(*dsn)
    if err != nil {
    errorLog.Fatal(err)
    }
    defer db.Close()

    templateCache, err := newTemplateCache("./ui/html/")
    if err != nil {
    errorLog.Fatal(err)
    }

    session := sessions.New([]byte(*secret))
    session.Lifetime = 12 * time.Hour
    session.Secure = true

    app := &application{
    errorLog:      errorLog,
    infoLog:       infoLog,
    session:       session,
    /*snippets:      &mysql.SnippetModel{},
    templateCache: templateCache,
    users:         &mysql.UserModel{DB: db},*/
    }

    tlsConfig := &tls.Config{
    PreferServerCipherSuites: true,
    CurvePreferences:         []tls.CurveID{tls.X25519, tls.CurveP256},
    }

    srv := &http.Server{
    Addr:         *addr,
    ErrorLog:     errorLog,
    Handler:      app.routes(),
    TLSConfig:    tlsConfig,
    IdleTimeout:  time.Minute,
    ReadTimeout:  5 * time.Second,
    WriteTimeout: 10 * time.Second,
    }

    infoLog.Printf("Starting server on %s", *addr)
    err = srv.ListenAndServeTLS("./tls/cert.pem", "./tls/key.pem")
    errorLog.Fatal(err)
    }

    func openDB(dsn string) (*sql.DB, error) {
    db, err := sql.Open("{{.dataBaseConnexion.driverName}}", dsn)
    if err != nil {
    return nil, err
    }
    if err = db.Ping(); err != nil {
    return nil, err
    }
    return db, nil
    }

{{end}}
